// transform any object into an emitter

// 1. 8 kyu https://www.codewars.com/kata/reversed-strings
function solution(str){
return str.split('').reverse().join('')
}
console.log(solution('world'))

// 2. 8 kyu https://www.codewars.com/kata/remove-first-and-last-character
function removeChar(str){
	return str.slice(1,str.length-1)
}
console.log(removeChar('1234'))

// 3. 8 kyu https://www.codewars.com/kata/palindrome-strings
function isPalindrome(line) {
	const str = String(line)
	const reverse = str.split('').reverse().join('')
	return reverse === str
}
console.log(isPalindrome(123214))

// 4. 7 kyu https://www.codewars.com/kata/anagram-detection
const isAnagram = function(test, original){
	const result = str => String(str).toLowerCase().split('').sort().join('')
	return result(test) === result(original)
}
console.log(isAnagram('DeathCubeK', 'DeathCubeK' ))

// 5. 7 kyu https://www.codewars.com/kata/birthday-i-cake
function cake(x, y){
	y = y.split('').map((u,i) => i % 2 ? i + 1 : u.codePointAt(0))
	y = y.reduce((sum, current) => sum + current)
	return (y * 100 / x).toFixed() > 70 ? 'Fire!' : 'That was close!'
}
console.log(cake(357, 'wus'))

// 6. 8 kyu https://www.codewars.com/kata/even-or-odd
function even_or_odd(number){
	return number % 2 ? 'Odd' : 'Even'
}
console.log(even_or_odd(0))

// 7. 8 kyu https://www.codewars.com/kata/century-from-year
function century(year) {
	const a = ~~(year/100)
	return a === year/100 ? a : a + 1
}
console.log(century(100))

// 8. 7 kyu https://www.codewars.com/kata/greatest-common-divisor
function mygcd(x,y){
	let i = x > y ? y : x
	for(i; i >= 0; i--){
		if (x/i === ~~(x/i) && y/i === ~~(y/i)) return i
	}
}
console.log(mygcd(800, 15))

// 9. 7 kyu https://www.codewars.com/kata/factorial
function factorial(n) {
		if (n < 0 || n > 12) throw new RangeError()
		let f = n ? n : 1
		for (let i = f; i > 1; i--) {
			f = f * (i - 1)
		}
		return f
}
console.log(factorial(0))

// 10. 7 kyu https://www.codewars.com/kata/find-the-duplicated-number-in-a-consecutive-unsorted-list
function findDup(arr){
	let a = arr.reduce((sum, current) => sum + current)
	let b = (arr.length - 1) * (arr.length) / 2;
	return a - b
}
console.log(findDup([1,2,2,3]))

// 11. 6 kyu https://www.codewars.com/kata/is-a-number-prime/
function isPrime(num) {
	if (num < 2) return false
	for(let i = 100000; i > 1; i--) {
		if (!(num % i) && num !== i) return false
	}
	return true
}
console.log(isPrime(938258161))

// 12. 8 kyu https://www.codewars.com/kata/remove-duplicates-from-list
function distinct(a) {
	let b = []
	for(let i = 0; i < a.length; i++) {
		if (!b.includes(a[i])) b.push(a[i])
	}
	return b
}
console.log(distinct([1,5,5,4,6,2,2,1]))

// 13. 8 kyu https://www.codewars.com/kata/sum-of-positive
function positiveSum(arr) {
	const a = arr.filter(u => u < 0 ? 0 : u)
	if (a.length === 0) return 0
	return a.reduce((a,b) => a + b)
}
console.log(positiveSum([1,3,-1,-1]))

// 14. 7 kyu https://www.codewars.com/kata/fizz-buzz
function fizzbuzz(n){
	let arr = []
	for (let i = 1; i <= n; i++) {
		arr.push(i)
	}
	return arr.map(u => !(u % 3) && !(u % 5) ? 'FizzBuzz' : !(u % 3) ? 'Fizz' : !(u % 5) ? 'Buzz' : u)
}
console.log(fizzbuzz(25))

// 15. 7 kyu https://www.codewars.com/kata/currying-functions-multiply-all-elements-in-an-array
const multiplyAll = arr => a => arr.map(u => u * a)
console.log(multiplyAll([1,2,3])(2))

// 16. 7 kyu https://www.codewars.com/kata/shortest-word
function findShort(s){
	const c = s.split(' ').sort((a,b) => a.length - b.length)
	return c[0].length
}
console.log(findShort('sdf sdfs abc'))

// 17. 7 kyu https://www.codewars.com/kata/square-every-digit
function squareDigits(num){
	return +(''+ num).split('').map(u => u * u).join('')
}
console.log(squareDigits(9119))












var emitterify = function(object) {
	var EventEmitter = require('events').EventEmitter;
	var emitter = new EventEmitter;

	require('events').EventEmitter.call(object);
	object.emit = emitter.emit;
	object.addListener = emitter.addListener;
	object.on = emitter.on;
	object.removeListener = emitter.removeListener;
	object.removeAllListeners = emitter.removeAllListeners;
	object.listeners = emitter.listeners;
}
exports.emitterify = emitterify;

var create_group = function(name) {
	var that = {name: name},
		my = {tasks: {}, taskCount:0};
	
	emitterify(that);
	that.add = function(task) {
		my.tasks[task.id] = 1;
		my.taskCount+=1;
	};
	
	that.remove = function(task) {
		if(my.tasks[task.id]) {
			delete my.tasks[task];
			my.taskCount-=1;
			
			if(0 === my.taskCount) {
				that.emit('completed');
			}
		}
	};
	
	return that;
};
exports.group = create_group;

var taskCounter = 1;
var create_task = function(method, group) {
	var that = {method:method, group:group, id: taskCounter++},
		my = {};
	
	// must inherit from EventEmitter
	//var emitter = require('events').EventEmitter;	
	// that = Object.beget(emitter);
	// require('events').EventEmitter.call(that);
	//  	that.method = method;
	// that.group = group;
	emitterify(that);
	if(group) { group.add(that); }
	
	return that;
};
exports.task = create_task;

var create_queue = function(name, concurrency) {
	var that = {name: name},
		my = { suspensionCount:0, concurrencyCount: concurrency,
			tasks:[], workerCount:0 };
	emitterify(that);
	if(!my.concurrency) {my.concurrency = 1;}
	
	that.push = function(task, group) {
		if(typeof(task) === 'function') {
			task = create_task(task,group);
		} else if(group) {
			// TODO: add the group to the task
		}
		my.tasks.unshift(task);
		
		my.checkForWork();
	};
	
	that.push_after = function(task, time) {
		// TODO
	};
	
	that.apply_task = function(k, task) {
		// TODO
	};
	
	that.suspend = function() {
		my.suspensionCount++;
	};
	
	that.resume = function() {
		if(my.suspensionCount > 0) {			
			my.suspensionCount--;
		}
		if(my.suspensionCount == 0) {
			my.checkForWork();
		}
	};
	
	my.checkForWork = function() {
	setTimeout(function() { 
		var nextTask;
//		console.log("check for work: " + my.workerCount + " of " + my.concurrencyCount);
		while(my.tasks.length && my.workerCount < my.concurrencyCount &&
			!my.suspensionCount) 
		{
			nextTask = my.tasks.pop();
			
			// setup up task w/ this.done method
			nextTask.done = function() {
				my.taskCompleted(nextTask);
			};
			my.workerCount += 1;
//			console.log("Queuing job on '" + that.name + "' queue.");
			nextTask.method(nextTask); 
		}
	}, 0);
	};
	
	my.taskCompleted = function(task) {
		my.workerCount -= 1;
//		console.log("Queue '" + that.name + "' completed task.");
		task.emit('completed');

		if(task.group) { task.group.remove(task); }
		
		if(0 === my.workerCount && 0 === my.tasks.length) { that.emit('completed'); }
		else { my.checkForWork(); }
	};
	
	return that;
};
exports.queue = create_queue;
exports.serialQueue = function(name) {
	return create_queue(name, 1);
};